# This is a basic workflow to help you get started with Actions

name: AutoRelease

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push or pull request events but only for the release/0.8 branch
  push:
    branches: [ release/0.8 ]
  #pull_request:
  #  branches: [ release/0.7 ]

  
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Using the organization-level secret
  DEPLOYMENT_TOKEN: ${{ secrets.DEPLOYMENT_TOKEN }}

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Debug
  
jobs:
  build:
    runs-on: windows-latest

    steps:         
    - uses: actions/checkout@v2   
    
    - name: Grab Version
      id: get_version
      shell: powershell
      run: |
        $version = Select-String -Path Razor/Properties/AssemblyInfo.cs  -Pattern 'AssemblyVersion\(\"([\w.-]+)\"\)' -AllMatches |  %{$_.Matches.Groups[1].Value}
        echo "::set-output name=version::$version"
    
    - name: Show Version
      run: echo "${{steps.get_version.outputs.version}}"
      
    - name: GitHub Tag Exists
      uses: mukunku/tag-exists-action@v1.0.0
      id: checkTag
      with: 
        tag: "v${{steps.get_version.outputs.version}}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        
    - run: echo ${{ steps.checkTag.outputs.exists }}
    
    # build   
    - name: Add MSBuild to PATH
      if: ${{ steps.checkTag.outputs.exists }} == false
      uses: microsoft/setup-msbuild@v1 
      
    - name: Display MSBuild version
      run: msbuild -version
      
    - name: Restore NuGet packages
      if: ${{ steps.checkTag.outputs.exists }} == false
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Print expanded MSBuild command
      run: echo msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Build
      if: ${{ steps.checkTag.outputs.exists }} == false
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Zip Razor
      if: ${{ steps.checkTag.outputs.exists }} == false
      id: create_zip
      uses: vimtor/action-zip@v1
      with:
        files: bin/Win32/Debug
        recursive: true
        dest: RazorEnhanced-${{ steps.get_version.outputs.version }}.zip

    # Instead of creating a release in the current repo, checkout the GitHub Pages repo
    - name: Checkout GitHub Pages Repository
      if: ${{ steps.checkTag.outputs.exists }} == false
      uses: actions/checkout@v2
      with:
        repository: RazorEnhanced/razorenhanced.github.io
        path: gh-pages
        token: ${{ secrets.DEPLOYMENT_TOKEN }}

    # Create releases directory if it doesn't exist
    - name: Create releases directory
      if: ${{ steps.checkTag.outputs.exists }} == false
      run: |
        if (!(Test-Path -Path "gh-pages/releases")) {
          New-Item -ItemType Directory -Path "gh-pages/releases"
        }
      shell: pwsh

    # Copy the zip file to the GitHub Pages repo
    - name: Copy release package
      if: ${{ steps.checkTag.outputs.exists }} == false
      run: |
        Copy-Item -Path "RazorEnhanced-${{ steps.get_version.outputs.version }}.zip" -Destination "gh-pages/releases/"
      shell: pwsh

    # Update the latest.json file with version info
    - name: Update latest.json
      if: ${{ steps.checkTag.outputs.exists }} == false
      run: |
        $latestJson = @{
          version = "${{ steps.get_version.outputs.version }}"
          zipUrl = "https://razorenhanced.github.io/releases/RazorEnhanced-${{ steps.get_version.outputs.version }}.zip"
          releaseDate = (Get-Date -Format "yyyy-MM-dd")
        } | ConvertTo-Json

        Set-Content -Path "gh-pages/releases/latest.json" -Value $latestJson -Force
      shell: pwsh

    # Commit and push changes to the GitHub Pages repo
    - name: Commit and push changes
      if: ${{ steps.checkTag.outputs.exists }} == false
      run: |
        cd gh-pages
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        git add releases/
        git commit -m "Add release version ${{ steps.get_version.outputs.version }}"
        git push
      shell: pwsh

    # Create a tag in the main repository
    - name: Create Tag
      if: ${{ steps.checkTag.outputs.exists }} == false
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        git tag -a "v${{ steps.get_version.outputs.version }}" -m "RazorEnhanced ${{ steps.get_version.outputs.version }}"
        git push origin "v${{ steps.get_version.outputs.version }}"
      shell: pwsh