name: release

on:
  workflow_dispatch:
  
env:
  SOLUTION_FILE_PATH: .
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEPLOYMENT_TOKEN: ${{ secrets.DEPLOYMENT_TOKEN }}
  BUILD_CONFIGURATION: Debug
  
jobs:
  build:
    runs-on: windows-latest

    steps:         
    - uses: actions/checkout@v3   
    
    - name: Grab Version
      id: get_version
      shell: powershell
      run: |
        # Read the file content
        $fileContent = Get-Content -Path Razor/Properties/AssemblyInfo.cs
        
        # Filter out comment lines and look for version
        $versionLine = $fileContent | Where-Object { $_ -notmatch '^\s*//' } | Select-String -Pattern 'AssemblyVersion\("([\d\.\w]+)"\)' | Select-Object -First 1
        
        if ($versionLine) {
          $version = $versionLine.Matches.Groups[1].Value
        } else {
          # Try alternative attribute format if first attempt fails
          $versionLine = $fileContent | Where-Object { $_ -notmatch '^\s*//' } | Select-String -Pattern 'AssemblyVersionAttribute\("([\d\.\w]+)"\)' | Select-Object -First 1
          if ($versionLine) {
            $version = $versionLine.Matches.Groups[1].Value
          } else {
            Write-Error "Could not find version information in AssemblyInfo.cs"
            exit 1
          }
        }
        
        Write-Host "Found version: $version"
        "version=$version" >> $env:GITHUB_OUTPUT
        
        # Generate the download URL and store it as an output
        $downloadUrl = "https://github.com/RazorEnhanced/RazorEnhanced/releases/download/v${version}/RazorEnhanced-${version}.zip"
        "download_url=$downloadUrl" >> $env:GITHUB_OUTPUT
        Write-Host "Download URL: $downloadUrl"
    
    - name: Show Version
      run: echo "${{steps.get_version.outputs.version}}"
      
    - name: GitHub Tag Exists
      uses: mukunku/tag-exists-action@v1.2.0
      id: checkTag
      with: 
        tag: "v${{steps.get_version.outputs.version}}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        
    - name: Show Tag Existence Result
      run: echo ${{ steps.checkTag.outputs.exists }}
    
    # Build steps  
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Display MSBuild version
      run: msbuild -version
      
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}
      
    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Zip Razor
      id: create_zip
      uses: vimtor/action-zip@v1
      with:
        files: bin/Win32/Debug
        recursive: true
        dest: RazorEnhanced-${{ steps.get_version.outputs.version }}.zip

    # Create or update tag first
    - name: Create Tag
      run: |
        # Set git identity for local operations
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Get current commit SHA
        $commitSha = $(git rev-parse HEAD)
        
        # Tag name with v prefix
        $tag = "v${{ steps.get_version.outputs.version }}"
        
        # Proper PowerShell conditional check
        if ("${{ steps.checkTag.outputs.exists }}" -eq "true") {
          Write-Host "Tag $tag already exists. Updating it to latest commit."
          
          # Delete the existing tag locally and remotely
          git tag -d $tag
          git push --delete origin $tag
        } else {
          Write-Host "Tag $tag does not exist. Creating a new tag."
        }
        
        # Create local tag
        git tag $tag
        git push origin $tag
        
        Write-Host "Tag created and pushed successfully: $tag"
      shell: pwsh

    # Now check if release exists after ensuring tag exists
    - name: Check if release exists
      id: check_release
      run: |
        $headers = @{
          Authorization = "token ${{ secrets.GITHUB_TOKEN }}"
          Accept = "application/vnd.github.v3+json"
        }
        try {
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.get_version.outputs.version }}" -Method Get -Headers $headers
          "exists=true" >> $env:GITHUB_OUTPUT
          "release_id=$($response.id)" >> $env:GITHUB_OUTPUT
          Write-Host "Release already exists with ID: $($response.id)"
        } catch {
          if ($_.Exception.Response.StatusCode -eq 404) {
            "exists=false" >> $env:GITHUB_OUTPUT
            Write-Host "Release does not exist"
          } else {
            Write-Error "Error checking release: $_"
            exit 1
          }
        }
      shell: pwsh

    # Create Release if it doesn't exist
    - name: Create Release
      id: create_release
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: RazorEnhanced ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

    # Set upload URL based on whether release was created or already existed
    - name: Set upload URL
      id: set_upload_url
      run: |
        if ("${{ steps.check_release.outputs.exists }}" -eq "true") {
          "upload_url=https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}/assets{?name,label}" >> $env:GITHUB_OUTPUT
        } else {
          "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh
        
    # Delete existing asset if it exists (for updates)
    - name: Delete existing asset
      if: steps.check_release.outputs.exists == 'true'
      run: |
        $headers = @{
          Authorization = "token ${{ secrets.GITHUB_TOKEN }}"
          Accept = "application/vnd.github.v3+json"
        }
        
        # Get assets for the release
        $assetsUrl = "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}/assets"
        $assets = Invoke-RestMethod -Uri $assetsUrl -Method Get -Headers $headers
        
        # Find matching asset
        $assetName = "RazorEnhanced-${{ steps.get_version.outputs.version }}.zip"
        $asset = $assets | Where-Object { $_.name -eq $assetName }
        
        if ($asset) {
          Write-Host "Found existing asset with ID: $($asset.id). Deleting it..."
          Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/assets/$($asset.id)" -Method Delete -Headers $headers
          Write-Host "Asset deleted successfully"
        } else {
          Write-Host "No existing asset found to delete"
        }
      shell: pwsh

    # Upload the zip file as a release asset
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./RazorEnhanced-${{ steps.get_version.outputs.version }}.zip
        asset_name: RazorEnhanced-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip

    # Checkout the GitHub Pages repo to update latest.json and other files
    - name: Checkout GitHub Pages Repository
      uses: actions/checkout@v3
      with:
        repository: RazorEnhanced/razorenhanced.github.io
        path: gh-pages
        token: ${{ secrets.DEPLOYMENT_TOKEN }}

    # Update the latest.json file with version info and direct download URL
    - name: Update latest.json
      run: |
        $latestJson = @{
          version = "${{ steps.get_version.outputs.version }}"
          zipUrl = "${{ steps.get_version.outputs.download_url }}"
          releaseDate = (Get-Date -Format "yyyy-MM-dd")
        } | ConvertTo-Json

        Set-Content -Path "gh-pages/latest.json" -Value $latestJson -Force
      shell: pwsh

    # Update Latest Build Link in index.htm (Moved from build_doc_api.yml)
    - name: Update Latest Build Link in index.htm
      run: |
        $indexFile = "gh-pages/index.htm"
        $releaseUrl = "${{ steps.get_version.outputs.download_url }}"
        
        if (-Not (Test-Path $indexFile)) {
          Write-Error "index.htm not found in gh-pages directory!"
          exit 1
        }

        # Read the file content
        $content = Get-Content $indexFile -Raw
        
        # Make a backup of the original file
        Copy-Item -Path $indexFile -Destination "$indexFile.bak"
        
        # Pattern adjusted for GitHub release URL instead of local repository
        $pattern = '(https://github\.com/RazorEnhanced/[^/]+/(?:releases|raw)/[^/]+/(?:releases/)?)[^"]+(" class="btn">)'
        $replacement = "$releaseUrl`${2}"
        
        # Replace the old download link with the new one
        $updatedContent = $content -replace $pattern, $replacement
        
        # Check if the pattern was found and replacement was made
        if ($updatedContent -eq $content) {
          Write-Warning "No matches found for replacement pattern. The file remains unchanged."
          
          # More specific troubleshooting info
          $startPos = $content.IndexOf('class="btn"')
          if ($startPos -gt 0) {
            $contextStart = [Math]::Max(0, $startPos - 100)
            $contextLength = [Math]::Min(200, $content.Length - $contextStart)
            $context = $content.Substring($contextStart, $contextLength)
            Write-Host "Context around button link: $context"
          }
        }
        
        try {
          # Write the updated content back to the file
          Set-Content -Path $indexFile -Value $updatedContent -ErrorAction Stop
          Write-Host "Successfully updated latest build link in index.htm to use: $releaseUrl"
        }
        catch {
          Write-Error "Failed to write to $indexFile. Error: $_"
          # Restore from backup
          Copy-Item -Path "$indexFile.bak" -Destination $indexFile
          exit 1
        }
      shell: pwsh

    # Update RazorEnhancedAutoUpdater.xml with the latest version (Moved from build_doc_api.yml)
    - name: Update Auto Updater XML
      run: |
        $updaterXmlFile = "gh-pages/RazorEnhancedAutoUpdater.xml"
        $versionNumber = "${{ steps.get_version.outputs.version }}"
        $releaseUrl = "${{ steps.get_version.outputs.download_url }}"
        
        if (-Not (Test-Path $updaterXmlFile)) {
          Write-Error "RazorEnhancedAutoUpdater.xml not found in gh-pages directory!"
          exit 1
        }

        # Read the XML file
        [xml]$xmlContent = Get-Content $updaterXmlFile
        
        # Update version
        $xmlContent.item.version = $versionNumber
        
        # Update URL to GitHub release URL
        $xmlContent.item.url = $releaseUrl
        
        # Save the updated XML
        try {
          $xmlContent.Save($updaterXmlFile)
          Write-Host "Successfully updated RazorEnhancedAutoUpdater.xml with version: $versionNumber"
          Write-Host "Updated download URL: $releaseUrl"
        }
        catch {
          Write-Error "Failed to update $updaterXmlFile. Error: $_"
          exit 1
        }
        
        # Output updated content for verification
        Write-Host "Updated XML content:"
        Get-Content $updaterXmlFile
      shell: pwsh

    # Generate AI-powered changelog from changes since the last tag
    - name: Generate AI Changelog
      id: generate_changelog
      if: steps.checkTag.outputs.exists != 'true'
      shell: pwsh
      run: |
        # Fetch all history for proper changelog generation
        git fetch --prune --unshallow
        
        # Get the previous tag to compare against
        $tags = $(git tag --sort=-v:refname)
        $previousTag = $tags | Select-Object -First 1
        
        if (-not $previousTag) {
          Write-Host "No previous tag found. Will use the changes since the beginning."
          # Get all commit messages for the AI to work with
          $commitMessages = git log --pretty=format:"%s %b" --no-merges
        } else {
          Write-Host "Generating changelog from $previousTag to HEAD"
          # Get commit messages between the previous tag and HEAD
          $commitMessages = git log "$previousTag..HEAD" --pretty=format:"%s %b" --no-merges
        }
        
        # If no commit messages, use a default message
        if (-not $commitMessages) {
          $commitMessages = "Various improvements and bug fixes."
        }
        
        # Format the commit messages for the GitHub AI query
        $commitsJoined = $commitMessages -join "\n"
        
        # Create the GraphQL query for GitHub AI
        $query = @{
          query = "query { repository(owner: ""RazorEnhanced"", name: ""RazorEnhanced"") { aiGenerated { summarizeCommits(prompt: ""Summarize these commit messages into a concise changelog with bullet points for the main changes. Focus on user-facing changes and improvements:\n$commitsJoined"") } } }"
        } | ConvertTo-Json -Compress
        
        try {
          # Call GitHub API with GraphQL to get AI-generated summary
          $response = Invoke-RestMethod -Uri "https://api.github.com/graphql" `
            -Method Post `
            -Headers @{
              "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
              "Accept" = "application/vnd.github.v4.idl+json"
            } `
            -Body $query `
            -ContentType "application/json"
          
          # Check if we got a valid response with AI content
          if ($response.data.repository.aiGenerated.summarizeCommits) {
            $aiSummary = $response.data.repository.aiGenerated.summarizeCommits
            Write-Host "AI generated summary successfully!"
          } else {
            Write-Host "Could not get AI summary, falling back to commit list"
            # Fallback to commit list if AI fails
            $aiSummary = ($commitMessages | ForEach-Object { "  $_" }) -join "`n"
          }
        }
        catch {
          Write-Host "Error using GitHub AI API: $_"
          Write-Host "Falling back to manual commit list"
          # Fallback to commit list if API fails
          $aiSummary = ($commitMessages | ForEach-Object { "  $_" }) -join "`n"
        }
        
        # Format the changelog content with version and date
        $currentDate = Get-Date -Format "MM/dd/yyyy"
        $version = "${{ steps.get_version.outputs.version }}"
        $changelogContent = "Version ${version} [${currentDate}]`n${aiSummary}`n`n"
        
        # Save the changelog content to a file for later use
        Set-Content -Path "new_changelog_entry.txt" -Value $changelogContent
        
        Write-Host "Changelog generated:"
        Write-Host $changelogContent

    # Update the changelog.html file with the new entry
    - name: Update Changelog File
      if: steps.checkTag.outputs.exists != 'true'
      shell: pwsh
      run: |
        $changelogPath = "gh-pages/changelog.html"
        
        if (-Not (Test-Path $changelogPath)) {
          Write-Error "changelog.html not found in gh-pages directory!"
          exit 1
        }
        
        $changelogContent = Get-Content -Path $changelogPath -Raw
        
        # Read the new changelog entry created earlier
        if (-Not (Test-Path "new_changelog_entry.txt")) {
          Write-Error "Generated changelog entry file not found!"
          exit 1
        }
        
        $newEntry = Get-Content -Path "new_changelog_entry.txt" -Raw
        
        # Insert the new entry at the beginning of the document_content section
        $updatedContent = $changelogContent -replace "(<document_content>)", "`$1`n$newEntry"
        
        # Write back to the file
        try {
          Set-Content -Path $changelogPath -Value $updatedContent -Force
          Write-Host "Changelog updated successfully!"
        }
        catch {
          Write-Error "Failed to update changelog.html: $_"
          exit 1
        }
      
    # Print the generated changelog content to the build log
    - name: Print Changelog Content
      if: steps.checkTag.outputs.exists != 'true'
      shell: pwsh
      run: |
        if (Test-Path "new_changelog_entry.txt") {
          Write-Host "================ GENERATED CHANGELOG ================"
          Get-Content -Path "new_changelog_entry.txt" | ForEach-Object { Write-Host $_ }
          Write-Host "==================================================="
        } else {
          Write-Host "No changelog entry was generated."
        }

    # Commit and push changes to the GitHub Pages repo
    #- name: Commit and push changes
    #  run: |
    #    cd gh-pages
    #    git config user.name "GitHub Actions Bot"
    #    git config user.email "actions@github.com"
    #    git add latest.json
    #    git add index.htm
    #    git add RazorEnhancedAutoUpdater.xml
    #    git add changelog.html
    #    git commit -m "Update to version ${{ steps.get_version.outputs.version }}"
    #    git push
    #  shell: pwsh