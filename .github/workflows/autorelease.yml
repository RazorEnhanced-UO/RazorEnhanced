# This is a basic workflow to help you get started with Actions

name: AutoRelease

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push or pull request events but only for the release/0.8 branch
  push:
    branches: [ release/0.8 ]
  #pull_request:
  #  branches: [ release/0.7 ]

  
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Using the organization-level secret
  DEPLOYMENT_TOKEN: ${{ secrets.DEPLOYMENT_TOKEN }}

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Debug
  
jobs:
  build:
    runs-on: windows-latest

    steps:         
    - uses: actions/checkout@v2   
    
    - name: Grab Version
      id: get_version
      shell: powershell
      run: |
        # Read the file content
        $fileContent = Get-Content -Path Razor/Properties/AssemblyInfo.cs
        
        # Filter out comment lines and look for version
        $versionLine = $fileContent | Where-Object { $_ -notmatch '^\s*//' } | Select-String -Pattern 'AssemblyVersion\("([\d\.\w]+)"\)' | Select-Object -First 1
        
        if ($versionLine) {
          $version = $versionLine.Matches.Groups[1].Value
        } else {
          # Try alternative attribute format if first attempt fails
          $versionLine = $fileContent | Where-Object { $_ -notmatch '^\s*//' } | Select-String -Pattern 'AssemblyVersionAttribute\("([\d\.\w]+)"\)' | Select-Object -First 1
          if ($versionLine) {
            $version = $versionLine.Matches.Groups[1].Value
          } else {
            Write-Error "Could not find version information in AssemblyInfo.cs"
            exit 1
          }
        }
        
        Write-Host "Found version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT
    
    - name: Show Version
      run: echo "${{steps.get_version.outputs.version}}"
      
    - name: GitHub Tag Exists
      uses: mukunku/tag-exists-action@v1.2.0
      id: checkTag
      with: 
        tag: "v${{steps.get_version.outputs.version}}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        
    - name: Show Tag Existence Result
      run: echo ${{ steps.checkTag.outputs.exists }}
    
    # build   
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1 
      
    - name: Display MSBuild version
      run: msbuild -version
      
    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Print expanded MSBuild command
      run: echo msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Build
      if: ${{ steps.checkTag.outputs.exists == 'false' }}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Zip Razor
      id: create_zip
      uses: vimtor/action-zip@v1
      with:
        files: bin/Win32/Debug
        recursive: true
        dest: RazorEnhanced-${{ steps.get_version.outputs.version }}.zip

    # checkout the GitHub Pages repo
    - name: Checkout GitHub Pages Repository
      uses: actions/checkout@v2
      with:
        repository: RazorEnhanced/razorenhanced.github.io
        path: gh-pages
        token: ${{ secrets.DEPLOYMENT_TOKEN }}

    # Checkout the Releases repository
    - name: Checkout Releases Repository
      uses: actions/checkout@v2
      with:
        repository: RazorEnhanced/Releases
        path: releases-repo
        token: ${{ secrets.DEPLOYMENT_TOKEN }}

    # Copy the zip file to the Releases repository
    - name: Copy to Releases repository
      run: |
        # Copy zip file to Releases repo
        Copy-Item -Path "RazorEnhanced-${{ steps.get_version.outputs.version }}.zip" -Destination "releases-repo/"
        
    # Update the latest.json file with version info
    # and also copy it to releases repo
    - name: Update latest.json
      run: |
        $latestJson = @{
          version = "${{ steps.get_version.outputs.version }}"
          zipUrl = "https://github.com/RazorEnhanced/Releases/raw/main/RazorEnhanced-${{ steps.get_version.outputs.version }}.zip"
          releaseDate = (Get-Date -Format "yyyy-MM-dd")
        } | ConvertTo-Json

        Set-Content -Path "gh-pages/latest.json" -Value $latestJson -Force
        Copy-Item -Path "gh-pages/latest.json" -Destination "releases-repo/latest.json" -Force
      shell: pwsh

    # Commit and push changes to the GitHub Pages repo
    - name: Commit and push changes
      run: |
        cd gh-pages
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        git add latest.json
        git commit -m "Add release version ${{ steps.get_version.outputs.version }}"
        git push
      shell: pwsh

    # Commit and push changes to the GitHub Releases repo
    - name: Commit and push changes
      run: |
        cd releases-repo
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        git add "RazorEnhanced-${{ steps.get_version.outputs.version }}.zip"
        git add latest.json
        git commit -m "Add release version ${{ steps.get_version.outputs.version }}"
        git push
      shell: pwsh

    # Create a tag using PowerShell and GitHub API
    - name: Create Tag
      run: |
        # Set git identity for local operations
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Get current commit SHA
        $commitSha = $(git rev-parse HEAD)
        
        # Tag name with v prefix
        $tag = "v${{ steps.get_version.outputs.version }}"
        
        # Proper PowerShell conditional check
        if ("${{ steps.checkTag.outputs.exists }}" -eq "true") {
          Write-Host "Tag $tag already exists. Updating it to latest commit."
          
          # Delete the existing tag locally and remotely
          git tag -d $tag
          git push --delete origin $tag
        } else {
          Write-Host "Tag $tag does not exist. Creating a new tag."
        }
        
        # Create API request body
        $body = @{
          ref = "refs/tags/$tag"
          sha = $commitSha
        } | ConvertTo-Json
        
        # Send API request to create tag
        $headers = @{
          Authorization = "token ${{ secrets.DEPLOYMENT_TOKEN }}"
          Accept = "application/vnd.github.v3+json"
        }
        
        try {
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/RazorEnhanced/RazorEnhanced/git/refs" -Method Post -Headers $headers -Body $body -ContentType "application/json"
          Write-Host "Tag created successfully: $($response.ref)"
        } catch {
          Write-Error "Failed to create tag: $_"
          Write-Error $_.Exception.Response.StatusCode
          Write-Error $_.Exception.Response.StatusDescription
          Write-Error $_.Exception.Response.Content
          exit 1
        }
      shell: pwsh